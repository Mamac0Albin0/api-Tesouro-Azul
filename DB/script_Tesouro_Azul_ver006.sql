-- Criação do banco de dados
CREATE DATABASE IF NOT EXISTS BANCO_TESOURO_AZUL;
USE BANCO_TESOURO_AZUL;

-- Tabela TB_TIPO_ASSINATURA
CREATE TABLE IF NOT EXISTS TB_TIPO_ASSINATURA (
    ID_TIPO INT AUTO_INCREMENT PRIMARY KEY,
    DESC_TIPO VARCHAR(20) NOT NULL UNIQUE
) ENGINE=InnoDB;

-- Inserção de tipos de assinatura
INSERT INTO TB_TIPO_ASSINATURA (DESC_TIPO) VALUES ('normal'), ('assinante');

-- Tabela TB_ASSINATURA
CREATE TABLE IF NOT EXISTS TB_ASSINATURA (
    ID_ASSINATURA INT AUTO_INCREMENT PRIMARY KEY,
    DESC_ASSINATURA VARCHAR(50) NOT NULL UNIQUE,
    VALOR_ASSINATURA DECIMAL(7,2) NOT NULL,
    TIPO_ASSINATURA_FK INT NOT NULL,
    DURACAO_SEGUNDOS_ASSINATURA INT NOT NULL, -- duração em segundos
    FOREIGN KEY (TIPO_ASSINATURA_FK) REFERENCES TB_TIPO_ASSINATURA(ID_TIPO)
) ENGINE=InnoDB;

-- Inserção de assinaturas
INSERT INTO TB_ASSINATURA (DESC_ASSINATURA, VALOR_ASSINATURA, TIPO_ASSINATURA_FK, DURACAO_SEGUNDOS_ASSINATURA) 
VALUES ('Plano Normal', 0.00, 1, 0), ('Plano Premium', 50.00, 2, 15552000); -- 180 dias

-- Tabela TB_USUARIO
CREATE TABLE IF NOT EXISTS TB_USUARIO (
    ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
    NOME_USUARIO VARCHAR(80) NOT NULL,
    EMAIL_USUARIO VARCHAR(35) NOT NULL UNIQUE CHECK (EMAIL_USUARIO LIKE '%@%'),
    DATA_NASC_USUARIO DATE NOT NULL,
    CPF_USUARIO CHAR(11) NOT NULL UNIQUE,
    CNPJ_USUARIO CHAR(14),
    ID_ASSINATURA_FK INT NOT NULL DEFAULT 1, -- 1 = plano normal, 2 = plano pago
    SENHA_USUARIO VARCHAR(255) NOT NULL CHECK (LENGTH(SENHA_USUARIO) BETWEEN 8 AND 20),
    FOTO_USUARIO MEDIUMBLOB,
    STATUS_USUARIO CHAR(1) NOT NULL DEFAULT 'a', -- 'a'=ativo, 'd'=desativado
    DATA_INICIO_ASSINATURA_USUARIO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_VALIDADE_ASSINATURA_USUARIO DATETIME,
    FOREIGN KEY (ID_ASSINATURA_FK) REFERENCES TB_ASSINATURA(ID_ASSINATURA)
) ENGINE=InnoDB;

-- Tabela TB_FORNECEDOR
-- Analisar aqui para ver se adequa adicionar id_usuario
CREATE TABLE IF NOT EXISTS TB_FORNECEDOR (
    ID_FORNECEDOR INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT,
    NOME_FORNECEDOR VARCHAR(40) NOT NULL UNIQUE,
    CNPJ_FORNECEDOR CHAR(20) NOT NULL UNIQUE,
    EMAIL_FORNECEDOR VARCHAR(35) NOT NULL CHECK (EMAIL_FORNECEDOR LIKE '%@%'),
    TEL_FORNECEDOR CHAR(9) UNIQUE,
    CEL_FORNECEDOR CHAR(15) NOT NULL UNIQUE,
    ENDERECO_FORNECEDOR VARCHAR(50) NOT NULL,
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)
) ENGINE=InnoDB;

-- Tabela TB_PRODUTO
CREATE TABLE IF NOT EXISTS TB_PRODUTO (
    ID_PRODUTO INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT NOT NULL,
    COD_PRODUTO VARCHAR(80) NOT NULL ,
    NOME_PRODUTO VARCHAR(20) NOT NULL ,
    VALOR_PRODUTO DECIMAL(8,2) NOT NULL DEFAULT 0,
    TIPO_PRODUTO VARCHAR(40) NOT NULL,
    IMG_PRODUTO MEDIUMBLOB,
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)
) ENGINE=InnoDB;

-- Tabela TB_PEDIDO_COMPRA
CREATE TABLE IF NOT EXISTS TB_PEDIDO_COMPRA (
    ID_PEDIDO INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT NOT NULL,
    ID_FORNECEDOR_FK INT,
    DATA_PEDIDO DATE NOT NULL,
    VALOR_PEDIDO DECIMAL(7,2) NOT NULL DEFAULT 0,
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO),
    FOREIGN KEY (ID_FORNECEDOR_FK) REFERENCES TB_FORNECEDOR(ID_FORNECEDOR)
) ENGINE=InnoDB;

-- Tabela TB_ITEM_COMPRA
CREATE TABLE IF NOT EXISTS TB_ITEM_COMPRA (
    ID_ITEM_COMPRA INT AUTO_INCREMENT PRIMARY KEY,
    ID_PRODUTO_FK INT NOT NULL,
    ID_PEDIDO_FK INT NOT NULL,
    VAL_ITEM_COMPRA DATE,
    LOTE_COMPRA VARCHAR(25), -- Codigo do lote
    QUANTIDADE_ITEM_COMPRA NUMERIC(8,2) NOT NULL, -- Quantidade total de itens do lote
    N_ITEM_COMPRA INT NOT NULL DEFAULT 1, -- Quantidade de lotes
    VALOR_TOTAL_ITEM_COMPRA DECIMAL (10,2),
    # A seguir encontra campos de lógica de vencimento
    ESTADO_ITEM_COMPRA CHAR(7) NOT NULL DEFAULT "estoque", -- campo para saber se o item cadastrado está no estoque. Definir como : "vendido", "vencido" ou "estoque"
    FOREIGN KEY (ID_PRODUTO_FK) REFERENCES TB_PRODUTO(ID_PRODUTO),
    FOREIGN KEY (ID_PEDIDO_FK) REFERENCES TB_PEDIDO_COMPRA(ID_PEDIDO)
) ENGINE=InnoDB;

-- Tabela TB_PEDIDO_VENDA
CREATE TABLE IF NOT EXISTS TB_PEDIDO_VENDA (
    ID_PEDIDO_VENDA INT AUTO_INCREMENT PRIMARY KEY,
	ID_USUARIO_FK INT NOT NULL,
    DATA_PEDIDO_VENDA DATE NOT NULL,
    VALOR_PEDIDO_VENDA NUMERIC(7,2) NOT NULL,
	FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)
) ENGINE=InnoDB;

-- Tabela TB_ITEM_VENDA
CREATE TABLE IF NOT EXISTS TB_ITEM_VENDA (
    ID_ITEM_VENDA INT AUTO_INCREMENT PRIMARY KEY,
    ID_PRODUTO_FK INT NOT NULL,
    ID_PEDIDO_VENDA_FK INT NOT NULL,
    LOTE_VENDA VARCHAR(25),
    QTS_ITEM_VENDA NUMERIC(8,2) NOT NULL,
    N_ITEM_VENDA INT NOT NULL,
    DESCONTO_ITEM_VENDA DECIMAL(10,2) DEFAULT 0, -- sempre utilizar valores fixos naturais (absolutos)
    VALOR_TOTAL_ITEM_VENDA DECIMAL(10,2) DEFAULT 0, -- Calcular por trigger
    FOREIGN KEY (ID_PRODUTO_FK) REFERENCES TB_PRODUTO(ID_PRODUTO),
    FOREIGN KEY (ID_PEDIDO_VENDA_FK) REFERENCES TB_PEDIDO_VENDA(ID_PEDIDO_VENDA)
) ENGINE=InnoDB;

-- Tabela TB_ESTOQUE_PRODUTO
CREATE TABLE IF NOT EXISTS TB_ESTOQUE_PRODUTO(
    ID_ESTOQUE INT AUTO_INCREMENT PRIMARY KEY,
    ID_PRODUTO_FK INT,
    ID_USUARIO_FK INT,
    QTD_TOTAL_ESTOQUE DECIMAL(10,2) NOT NULL DEFAULT 0,
    VALOR_GASTO_TOTAL_ESTOQUE DECIMAL(10,2) NOT NULL DEFAULT 0,
    VALOR_POTENCIAL_VENDA_ESTOQUE DECIMAL(10,2) NOT NULL DEFAULT 0, -- Ao ser cadastrado por trigger, o usuario posteriormente informará o valor do produto
    DATA_ATUALIZACAO_ESTOQUE DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (ID_PRODUTO_FK) REFERENCES TB_PRODUTO(ID_PRODUTO),
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)
);

-- Tabela TB_LUCRO
-- Aqui seria adequado guardar a data que o lucro busca seus itens
CREATE TABLE IF NOT EXISTS TB_LUCRO (
    ID_LUCRO INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT NOT NULL,
    DATA_CONTABILIZACAO_LUCRO DATE NOT NULL, -- Data que atualizou a tabela
    VALOR_LUCRO DECIMAL(10,2),
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)
) ENGINE=InnoDB;

-- Tabela TB_ITENS_LUCRO
-- Olhar essa estrutura quando possivel
-- Esta estrutura não guarda itens especificos, mas somente os pedidos de venda e compra
CREATE TABLE IF NOT EXISTS TB_ITENS_LUCRO (
    ID_LUCRO_FK INT NOT NULL,
    ID_PEDIDO_VENDA_FK INT NOT NULL,
    ID_COMPRA_FK INT NOT NULL,
    PRIMARY KEY (ID_LUCRO_FK, ID_PEDIDO_VENDA_FK, ID_COMPRA_FK),
    FOREIGN KEY (ID_LUCRO_FK) REFERENCES TB_LUCRO(ID_LUCRO),
    FOREIGN KEY (ID_PEDIDO_VENDA_FK) REFERENCES TB_PEDIDO_VENDA(ID_PEDIDO_VENDA),
    FOREIGN KEY (ID_COMPRA_FK) REFERENCES TB_PEDIDO_COMPRA(ID_PEDIDO)
) ENGINE=InnoDB;

-- tabela TB_META
CREATE TABLE IF NOT EXISTS TB_META(
    ID_META INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT,
    VALOR_DESEJADO_META DECIMAL(12,2) NOT NULL,
    VALOR_ATINGIDO_META DECIMAL(12,2) DEFAULT 0,
    DATA_META DATE NOT NULL,
    STATUS_META ENUM('em_andamento', 'concluida', 'cancelada') DEFAULT 'em_andamento',
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO)    
) ENGINE=InnoDB;

-- Adicionar triggers para ambas as tabelas de metas serem adicionadas automaticamente

-- tabela TB_ITEM_META
CREATE TABLE IF NOT EXISTS TB_ITEM_META(
	ID_ITEM_META INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO_FK INT NOT NULL,
    ID_PRODUTO_FK INT NOT NULL,
	VALOR_DESEJADO_ITEM_META DECIMAL(12,2) NOT NULL,
    VALOR_ATINGIDO_ITEM_META DECIMAL(12,2) DEFAULT 0,
    QNT_VENDIDA_META DECIMAL(8,2) DEFAULT 0,
    DATA_META_ITEM DATE NOT NULL,
    STATUS_META ENUM('em_andamento', 'concluida', 'cancelada') DEFAULT 'em_andamento',
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES TB_USUARIO(ID_USUARIO),
    FOREIGN KEY (ID_PRODUTO_FK) REFERENCES TB_PRODUTO(ID_PRODUTO)
) ENGINE=InnoDB;
